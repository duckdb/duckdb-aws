# name: test/sql/aws_minio_secret.test
# description: test aws extension using secrets with minio test server
# group: [aws]

require aws

require httpfs

require-env DUCKDB_S3_ENDPOINT

require-env DUCKDB_S3_USE_SSL

require-env S3_TEST_SERVER_AVAILABLE 1

set ignore_error_messages

statement ok
set secret_directory='__TEST_DIR__/aws_minio_secret'

# Without params, this will use the DefaultAWSCredentialsProviderChain (https://sdk.amazonaws.com/cpp/api/LATEST/root/html/md_docs_2_credentials___providers.html)
statement ok
CREATE SECRET my_aws_secret (
    TYPE S3,
    PROVIDER credential_chain,
    SCOPE 's3://test-bucket/aws_minio_secret/secret1',
    ENDPOINT '${DUCKDB_S3_ENDPOINT}',
    USE_SSL '${DUCKDB_S3_USE_SSL}'
);

query I
SELECT name FROM which_secret('s3://test-bucket/aws_minio_secret/secret1/test.csv', 's3')
----
my_aws_secret

# secret was created
query I
SELECT name FROM duckdb_secrets();
----
my_aws_secret

query I
SELECT secret_string FROM duckdb_secrets(redact=false);
----
<REGEX>:.*secret=minio_duckdb_user_password.*

query I
SELECT secret_string FROM duckdb_secrets(redact=false);
----
<REGEX>:.*key_id=minio_duckdb_user.*

query I
SELECT secret_string FROM duckdb_secrets(redact=false);
----
<REGEX>:.*region=eu-west-1.*

# Ensure the secret works
statement ok
COPY (select 123 as column) to 's3://test-bucket/aws_minio_secret/secret1/test.csv';

query I
SELECT * FROM 's3://test-bucket/aws_minio_secret/secret1/test.csv';
----
123

# You can specify which config profile to use, this uses the ProfileConfigFileAWSCredentialsProvider directly
statement ok
CREATE SECRET my_aws_secret_2 (
    TYPE S3,
    PROVIDER credential_chain,
    PROFILE 'minio-testing-2',
    SCOPE 's3://test-bucket/aws_minio_secret/secret2',
    ENDPOINT '${DUCKDB_S3_ENDPOINT}',
    USE_SSL '${DUCKDB_S3_USE_SSL}'
);

query I
SELECT secret_string FROM duckdb_secrets(redact=false) where name='my_aws_secret_2';
----
<REGEX>:.*secret=minio_duckdb_user_2_password.*

query I
SELECT secret_string FROM duckdb_secrets(redact=false) where name='my_aws_secret_2';
----
<REGEX>:.*key_id=minio_duckdb_user_2.*

query I
SELECT secret_string FROM duckdb_secrets(redact=false) where name='my_aws_secret_2';
----
<REGEX>:.*region=eu-west-1.*

# Ensure the secret works
statement ok
COPY (select 123 as column) to 's3://test-bucket/aws_minio_secret/secret2/test.csv';

query I
SELECT * FROM 's3://test-bucket/aws_minio_secret/secret2/test.csv';
----
123

statement ok
CREATE SECRET my_aws_secret_3 (
    TYPE S3,
    PROVIDER credential_chain,
    PROFILE 'minio-testing-invalid',
    SCOPE 's3://test-bucket/aws_minio_secret/secret_incorrect_credentials',
    ENDPOINT '${DUCKDB_S3_ENDPOINT}',
    USE_SSL '${DUCKDB_S3_USE_SSL}'
);

query I
SELECT secret_string FROM duckdb_secrets(redact=false) where name='my_aws_secret_3';
----
<REGEX>:.*secret=thispasswordiscompletelywrong.*

query I
SELECT secret_string FROM duckdb_secrets(redact=false) where name='my_aws_secret_3';
----
<REGEX>:.*key_id=minio_duckdb_user_invalid.*

query I
SELECT secret_string FROM duckdb_secrets(redact=false) where name='my_aws_secret_3';
----
<REGEX>:.*region=the-moon-123.*

query I
SELECT secret_string FROM duckdb_secrets(redact=false) where name='my_aws_secret_3';
----
<REGEX>:.*session_token=completelybogussessiontoken.*

# Malformed region: throws 400
statement error
COPY (select 123 as column) to 's3://test-bucket/aws_minio_secret/secret_incorrect_credentials/test.csv';
----
400